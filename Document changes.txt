Database Change Documentation Format

To ensure I can implement database changes correctly, the senior dev should document changes using this exact format:
1. Database Schema Changes

## Database Changes Required

### New Tables
**Table Name:** `table_name`
**Purpose:** Brief description of what this table stores
**Columns:**
- `column_name` (data_type, constraints) - description
- `user_id` (uuid, NOT NULL, FK to auth.users) - references authenticated user
- `created_at` (timestamp with time zone, DEFAULT now())

**RLS Policies Needed:**
- Users can view their own records
- Users can insert their own records
- Admins can view all records

### Table Modifications
**Table:** `existing_table`
**Changes:**
- ADD COLUMN `new_column` (data_type, constraints) - description
- DROP CONSTRAINT `constraint_name`
- ADD CONSTRAINT `new_constraint_name` UNIQUE (column1, column2)

### New Functions/Triggers
**Function Name:** `function_name`
**Purpose:** What it does
**Parameters:** List parameters and types
**Security:** SECURITY DEFINER/INVOKER

2. Frontend Integration Changes

## Frontend Changes Required

### New Types/Interfaces
- Update `src/integrations/supabase/types.ts` will be auto-generated
- New custom types needed in components

### Component Updates
**File:** `src/components/ComponentName.tsx`
**Changes:**
- New props needed: `{ prop: type }`
- New API calls to: `supabase.from('table').operation()`
- New state management for: `useState<Type>()`

### Hook Updates
**File:** `src/hooks/useHookName.ts`
**Changes:**
- New functions to export
- Database operations to add
- Error handling for new scenarios

3. API/RPC Functions

## Database Functions Required

### RPC Function
**Name:** `function_name`
**Parameters:**
- `_param_name` (type) - description
**Returns:** return_type
**Purpose:** What business logic it handles
**Security:** Who can call it (RLS bypass needed?)

### Example Call
```typescript
const { data, error } = await supabase.rpc('function_name', {
  _param_name: value
});

4. Critical Integration Notes

## Integration Requirements

### Authentication Dependencies
- Does this require user to be logged in?
- Any role-based access needed?

### Real-time Subscriptions
- Should changes trigger real-time updates?
- Which components need to listen for changes?

### Data Relationships
- Foreign key relationships to maintain
- Cascade delete behavior needed
- Data validation rules

### Migration Dependencies
- Must run after which existing migration?
- Any data migration/backfill needed?


Frontend Feature Documentation Format
1. Feature Overview

**Feature Name:** [Clear, descriptive name]
**Route/Page:** [e.g., /media, /dashboard, component-only]
**Type:** [New Page | Component Enhancement | UI Update | Hook/Context | Styling Update]
**Priority Impact:** [High | Medium | Low]

2. File Changes Summary

**New Files Created:**
- src/components/[ComponentName].tsx
- src/hooks/use[HookName].ts
- src/pages/[PageName].tsx
- src/types/[TypeName].ts

**Modified Files:**
- src/App.tsx (routing changes)
- src/components/[ExistingComponent].tsx
- src/hooks/[ExistingHook].ts
- tailwind.config.ts (if styling changes)

3. Component Architecture

**New Components:**
- ComponentName: Purpose and props interface
- SubComponent: Child component details

**Component Props/Interfaces:**
```typescript
interface NewComponentProps {
  property: string;
  onAction: () => void;
}

State Management:

    Local state: [useState, what it manages]
    Context used: [AuthContext, AppContext, etc.]
    External hooks: [useQuery, custom hooks]


### **4. Routing Changes**

New Routes Added:

    /route-path → PageComponent (Protected: Yes/No)

Route Guards:

    Authentication required: Yes/No
    Role restrictions: admin/manager/user

Navigation Updates:

    Added to: [main nav, sidebar, floating nav]
    Icon used: [Lucide icon name]


### **5. UI/Styling Details**

Tailwind Classes Added:

    Custom utilities: [if any new utilities]
    Responsive breakpoints used: [xs, sm, md, lg, xl]
    Dark mode support: Yes/No

Shadcn/UI Components Used:

    Button, Card, Dialog, etc.
    Any customizations made

CSS Custom Properties:

    New CSS variables: [if any]
    Animation keyframes: [if any custom animations]


### **6. Data Flow & Integration**

Supabase Integration:

    Tables accessed: [table names]
    RPC functions called: [function names]
    Real-time subscriptions: [if any]

Context Usage:

    Data consumed from: [AuthContext, AppContext, etc.]
    Data provided to: [child components]

API Calls:

    Supabase queries: [select, insert, update, delete]
    Error handling: [how errors are managed]


### **7. Functionality Details**

User Actions:

    Click handlers: [what they do]
    Form submissions: [data validation, submission flow]
    State changes: [what triggers updates]

Business Logic:

    Calculations: [any computations]
    Validations: [form validation, data checks]
    Side effects: [useEffect dependencies]


### **8. Dependencies & Imports**

New Package Dependencies:

    package-name: version (purpose)

Internal Imports:

    Components: [from @/components/...]
    Hooks: [from @/hooks/...]
    Utils: [from @/lib/...]
    Types: [from @/types/...]


### **9. Mobile/Responsive Considerations**

Breakpoint Behavior:

    Mobile (xs-sm): [layout changes]
    Tablet (md): [layout changes]
    Desktop (lg+): [layout changes]

Touch Interactions:

    Gestures supported: [swipe, tap, etc.]
    Mobile-specific UI: [bottom sheets, mobile nav]


### **10. Accessibility & UX**

Accessibility Features:

    ARIA labels: [for screen readers]
    Keyboard navigation: [tab order, shortcuts]
    Focus management: [focus traps, skip links]

User Experience:

    Loading states: [skeletons, spinners]
    Error states: [error boundaries, toast messages]
    Success feedback: [confirmations, celebrations]


### **11. Testing Considerations**

Test Scenarios:

    User can: [list user actions to test]
    Edge cases: [error scenarios, empty states]
    Browser compatibility: [any specific considerations]

Manual Testing Steps:

    Navigate to [route]
    Perform [action]
    Verify [expected result]


### **12. Integration Notes**

Potential Conflicts:

    Components that might be affected
    Routing conflicts
    Styling conflicts

Dependencies on Other Features:

    Requires: [other components/features]
    Blocks: [features that depend on this]

Performance Impact:

    Bundle size: [significant additions]
    Render performance: [heavy computations]


---

**This format ensures I can:**
1. Understand exactly what was changed and why
2. Identify any potential conflicts with existing code
3. Know what to test and verify
4. Understand the complete feature flow
5. Maintain consistency with the existing codebase architecture

**The senior dev should include code snippets for complex logic** and **always specify the exact file paths** for any changes made.

Based on my analysis of the codebase, here's the specific documentation format the senior developer should use when adding frontend features (non-database changes):
Frontend Feature Documentation Format
1. Feature Overview

**Feature Name:** [Clear, descriptive name]
**Route/Page:** [e.g., /media, /dashboard, component-only]
**Type:** [New Page | Component Enhancement | UI Update | Hook/Context | Styling Update]
**Priority Impact:** [High | Medium | Low]

2. File Changes Summary

**New Files Created:**
- src/components/[ComponentName].tsx
- src/hooks/use[HookName].ts
- src/pages/[PageName].tsx
- src/types/[TypeName].ts

**Modified Files:**
- src/App.tsx (routing changes)
- src/components/[ExistingComponent].tsx
- src/hooks/[ExistingHook].ts
- tailwind.config.ts (if styling changes)

3. Component Architecture

**New Components:**
- ComponentName: Purpose and props interface
- SubComponent: Child component details

**Component Props/Interfaces:**
```typescript
interface NewComponentProps {
  property: string;
  onAction: () => void;
}

State Management:

    Local state: [useState, what it manages]
    Context used: [AuthContext, AppContext, etc.]
    External hooks: [useQuery, custom hooks]


### **4. Routing Changes**

New Routes Added:

    /route-path → PageComponent (Protected: Yes/No)

Route Guards:

    Authentication required: Yes/No
    Role restrictions: admin/manager/user

Navigation Updates:

    Added to: [main nav, sidebar, floating nav]
    Icon used: [Lucide icon name]


### **5. UI/Styling Details**

Tailwind Classes Added:

    Custom utilities: [if any new utilities]
    Responsive breakpoints used: [xs, sm, md, lg, xl]
    Dark mode support: Yes/No

Shadcn/UI Components Used:

    Button, Card, Dialog, etc.
    Any customizations made

CSS Custom Properties:

    New CSS variables: [if any]
    Animation keyframes: [if any custom animations]


### **6. Data Flow & Integration**

Supabase Integration:

    Tables accessed: [table names]
    RPC functions called: [function names]
    Real-time subscriptions: [if any]

Context Usage:

    Data consumed from: [AuthContext, AppContext, etc.]
    Data provided to: [child components]

API Calls:

    Supabase queries: [select, insert, update, delete]
    Error handling: [how errors are managed]


### **7. Functionality Details**

User Actions:

    Click handlers: [what they do]
    Form submissions: [data validation, submission flow]
    State changes: [what triggers updates]

Business Logic:

    Calculations: [any computations]
    Validations: [form validation, data checks]
    Side effects: [useEffect dependencies]


### **8. Dependencies & Imports**

New Package Dependencies:

    package-name: version (purpose)

Internal Imports:

    Components: [from @/components/...]
    Hooks: [from @/hooks/...]
    Utils: [from @/lib/...]
    Types: [from @/types/...]


### **9. Mobile/Responsive Considerations**

Breakpoint Behavior:

    Mobile (xs-sm): [layout changes]
    Tablet (md): [layout changes]
    Desktop (lg+): [layout changes]

Touch Interactions:

    Gestures supported: [swipe, tap, etc.]
    Mobile-specific UI: [bottom sheets, mobile nav]


### **10. Accessibility & UX**

Accessibility Features:

    ARIA labels: [for screen readers]
    Keyboard navigation: [tab order, shortcuts]
    Focus management: [focus traps, skip links]

User Experience:

    Loading states: [skeletons, spinners]
    Error states: [error boundaries, toast messages]
    Success feedback: [confirmations, celebrations]


### **11. Testing Considerations**

Test Scenarios:

    User can: [list user actions to test]
    Edge cases: [error scenarios, empty states]
    Browser compatibility: [any specific considerations]

Manual Testing Steps:

    Navigate to [route]
    Perform [action]
    Verify [expected result]


### **12. Integration Notes**

Potential Conflicts:

    Components that might be affected
    Routing conflicts
    Styling conflicts

Dependencies on Other Features:

    Requires: [other components/features]
    Blocks: [features that depend on this]

Performance Impact:

    Bundle size: [significant additions]
    Render performance: [heavy computations]


---

**This format ensures I can:**
1. Understand exactly what was changed and why
2. Identify any potential conflicts with existing code
3. Know what to test and verify
4. Understand the complete feature flow
5. Maintain consistency with the existing codebase architecture

**The senior dev should include code snippets for complex logic** and **always specify the exact file paths** for any changes made.



### Build & Development Environment Changes
- **Vite Configuration**: Any changes to `vite.config.ts` (plugins, aliases, build settings)
- **TypeScript Configuration**: Updates to `tsconfig.json`, `tsconfig.app.json`, or `tsconfig.node.json`
- **ESLint Configuration**: Changes to `eslint.config.js` rules or plugins
- **Tailwind Configuration**: Updates to `tailwind.config.ts` (theme, utilities, plugins)
- **Package Dependencies**: New packages added or version changes in `package.json`

### **Environment Variables & Secrets**
- **New Environment Variables**: List any new VITE_* variables needed
- **Supabase Configuration**: Changes to project settings, RLS policies, or API keys
- **Third-party Integrations**: API keys or configuration for external services

📱 Capacitor & Mobile-Specific Changes
Native Capabilities Documentation

### Capacitor/Mobile Changes
- **Capacitor Configuration**: Updates to `capacitor.config.ts`
- **Native Permissions**: Any new iOS/Android permissions required
- **Plugin Additions**: New Capacitor plugins added
- **Platform-Specific Code**: iOS/Android specific implementations
- **Build Process Changes**: Changes to mobile build pipeline

🎨 Styling & Design System Changes
CSS & Design Documentation

### Styling Updates
- **Custom CSS**: Changes to `src/index.css`, `src/styles/animations.css`, `src/styles/components.css`
- **Theme Variables**: Updates to CSS custom properties
- **Responsive Breakpoints**: Changes to screen sizes or responsive behavior
- **Animation System**: New keyframes or animation utilities
- **Accessibility Features**: Color contrast, focus states, or ARIA updates

🔄 State Management & Context Changes
Application State Documentation

### State Management Changes
- **Context Providers**: Updates to existing contexts or new providers
- **Global State**: Changes to user preferences, authentication state, or app-wide data
- **Local Storage**: New localStorage keys or data structures
- **Session Management**: Changes to user session tracking or activity monitoring

🔒 Security & Permissions
Security Documentation

### Security Updates
- **RLS Policy Changes**: Any modifications to Row Level Security policies
- **Authentication Flow**: Changes to login/logout/registration processes
- **User Roles**: Updates to role-based access control
- **Data Validation**: New form validation or input sanitization
- **CORS Configuration**: Any cross-origin resource sharing updates

🚀 Performance & Optimization
Performance Documentation

### Performance Changes
- **Code Splitting**: New lazy-loaded components or routes
- **Asset Optimization**: Image compression, font loading, or bundle optimizations
- **Caching Strategy**: Changes to data caching or service worker implementation
- **Memory Management**: Updates to prevent memory leaks or optimize rendering

🧪 Testing & Quality Assurance
Testing Documentation

### Testing Updates
- **New Test Files**: Unit tests, integration tests, or E2E tests added
- **Testing Configuration**: Changes to Jest, Vitest, or other testing frameworks
- **Mock Data**: Updates to mock services or test fixtures
- **Testing Scripts**: New npm scripts for testing or CI/CD pipeline changes

📋 Migration & Deployment
Deployment Documentation

### Deployment Changes
- **Build Process**: Changes to build commands or deployment scripts
- **Environment Configuration**: Different settings for dev/staging/production
- **Database Migrations**: Order of migrations and any manual steps required
- **Feature Flags**: New feature toggles or configuration options
- **Rollback Plan**: Steps to revert changes if issues arise

🎯 Critical Integration Points

Make sure they specifically document:

    Breaking Changes: Any changes that could break existing functionality
    Dependency Conflicts: If new packages conflict with existing ones
    Browser Compatibility: If changes affect supported browsers
    Performance Impact: Memory, CPU, or network usage changes
    User Experience Changes: Anything that changes how users interact with the app

📝 Recommended Documentation Template

# Feature: [Feature Name]
**Developer**: [Name] | **Date**: [Date] | **Branch**: [Branch Name]

## Summary
Brief description of what was changed and why.

## Files Modified
- `path/to/file.tsx` - Description of changes
- `path/to/another.ts` - Description of changes

## Dependencies
- Added: package-name@version
- Updated: existing-package@old-version → new-version
- Removed: deprecated-package

## Configuration Changes
- Environment variables added/changed
- Build configuration updates
- Deployment settings modified

## Testing
- [ ] Unit tests added/updated
- [ ] Integration tests pass
- [ ] Manual testing completed
- [ ] Accessibility testing done

## Breaking Changes
- List any breaking changes
- Migration steps required
- Rollback procedures

## Notes
- Any additional context
- Known issues or limitations
- Future improvements needed