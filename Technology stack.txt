I'll provide you with a comprehensive breakdown of your fitness tracking application. Let me examine the codebase in detail to give you a thorough analysis.

Let me also examine some key UI components to understand the styling patterns:

Now let me examine one more key file to understand the routing and overall structure:

# Comprehensive Tech Stack Breakdown

## **Frontend Architecture**

### **Core Technologies**
- **React 18.3.1** - Modern React with hooks and functional components
- **TypeScript 5.5.3** - Full type safety throughout the application
- **Vite 5.4.1** - Fast build tool and development server
- **React Router DOM 6.26.2** - Client-side routing with protected routes

### **Build System & Configuration**
- **Vite Configuration**: 
  - Uses SWC for fast React compilation
  - Path aliases configured (`@/` points to `src/`)
  - Development server on port 8080
  - Component tagging for development mode
- **TypeScript Configuration**: Strict mode enabled with modern ES modules
- **ESLint**: Code quality and consistency enforcement

### **UI Framework & Styling**

#### **Design System**
- **Tailwind CSS 3.4.11** - Utility-first CSS framework
- **Shadcn/UI** - Pre-built accessible components using Radix UI primitives
- **Radix UI Primitives** - Comprehensive set of accessible, unstyled UI components:
  - Accordion, Alert Dialog, Avatar, Button, Card, Dialog
  - Dropdown Menu, Form, Input, Select, Tabs, Toast, Tooltip
  - All with built-in accessibility features

#### **Styling Architecture**
- **CSS Custom Properties** - HSL-based color system with light/dark mode support
- **Responsive Design** - Mobile-first approach with custom breakpoints:
  - Standard: xs(475px), sm(640px), md(768px), lg(1024px), xl(1280px), 2xl(1536px)  
  - Custom: tablet, laptop, desktop, wide
  - Orientation: landscape, portrait
  - Interaction: touch, mouse
- **Safe Area Support** - iOS notch and Android navigation bar handling
- **Advanced Animations**:
  - Tailwind CSS Animate for micro-interactions
  - Custom keyframes for floating, scaling, sliding effects
  - Framer Motion 12.22.0 for complex animations

#### **Accessibility Features**
- **WCAG 2.1 AA Compliance**:
  - Focus management and keyboard navigation
  - Screen reader support with ARIA attributes
  - Skip links and proper heading hierarchy
  - Minimum touch target sizes (44px)
- **User Preferences**:
  - Reduced motion support
  - High contrast mode
  - Color blind accessibility (protanopia, deuteranopia, tritanopia)
  - Theme switching (light/dark/system)
  - Font size adjustment
- **Sound Effects** - Optional audio feedback with user preference controls

### **State Management**

#### **Context Architecture**
- **AuthContext** - User authentication state with Supabase Auth
- **AppContext** - Central application state (user profile, stats, activities)
- **UserStatsContext** - Real-time user statistics with Supabase subscriptions
- **UserPreferencesContext** - User settings and accessibility preferences

#### **Data Fetching**
- **TanStack React Query 5.56.2** - Server state management, caching, and synchronization
- **Supabase Client** - Real-time database subscriptions and authentication

### **Mobile Development**
- **Capacitor 7.4.0** - Cross-platform native app development
- **PWA Support** - Progressive Web App capabilities
- **Native Features**:
  - Camera access for QR code scanning
  - Health data integration
  - Push notifications
  - Haptic feedback

## **Backend Architecture**

### **Database (Supabase PostgreSQL)**

#### **Core Tables**
1. **profiles** - User profile information
   - `id`, `user_id`, `name`, `email`, `department`
   - `height`, `weight`, `age`, `weekly_goal`
   - `avatar_url`, `join_date`, `fitness_level`

2. **user_stats** - Real-time fitness tracking
   - `today_steps`, `weekly_steps`, `current_streak`
   - `water_intake`, `calories_burned`, `heart_rate`
   - `sleep_hours`, `last_activity_date`

3. **activities** - Activity logging
   - `type`, `duration`, `steps`, `distance`
   - `calories_burned`, `date`, `user_id`

4. **challenges** - Team challenges
   - `title`, `description`, `type`, `target_value`
   - `start_date`, `end_date`, `is_active`, `created_by`

5. **events** - Event management
   - `name`, `description`, `location`
   - `start_time`, `end_time`, `created_by`

6. **notifications** - User notifications
   - `title`, `message`, `type`, `is_read`
   - `user_id`, `event_id`

7. **user_roles** - Role-based access control
   - Enum: `admin`, `manager`, `moderator`, `user`

8. **user_preferences** - User settings
   - `theme`, `language`, `sound_enabled`
   - `haptic_enabled`, `notifications_enabled`

9. **user_sessions** - Session tracking
   - `session_id`, `user_agent`, `page_path`
   - `last_seen`, `is_active`, `ip_address`

#### **Database Functions**
- **`has_role(user_id, role)`** - Role checking with security definer
- **`update_user_session()`** - Session management
- **`handle_new_user()`** - Automatic profile creation trigger

#### **Row Level Security (RLS)**
- **Profile Access**: Users can view all profiles, modify only their own
- **Stats Access**: Users can only access their own statistics
- **Activity Access**: Users can only view/modify their own activities
- **Admin Access**: Role-based access to user management
- **Challenge Access**: Public viewing, creator modification
- **Event Management**: Public events, creator control

### **Authentication & Authorization**
- **Supabase Auth** - Built-in authentication system
- **JWT Tokens** - Secure session management
- **Role-Based Access Control** - Hierarchical permissions (admin > manager > user)
- **Protected Routes** - Frontend route protection

### **Real-time Features**
- **Supabase Realtime** - WebSocket connections for live updates
- **User Presence** - Real-time user activity tracking
- **Live Statistics** - Real-time step counting and health metrics
- **Push Notifications** - Event and challenge notifications

## **Key Features & Components**

### **Dashboard System**
- **Responsive Layout** - Mobile-first design with desktop optimization
- **Health Summary** - Real-time fitness metrics display
- **Challenge Integration** - Team challenges with countdown timers
- **Social Feed** - Activity sharing and community features
- **Quick Actions** - Context-sensitive action buttons

### **Activity Tracking**
- **Step Counter** - Daily/weekly step tracking
- **Activity Types** - Walk, run, cycle, workout categorization
- **Calorie Calculation** - Metabolic rate-based calorie estimation
- **Goal Progress** - Visual progress indicators
- **Streak Tracking** - Consecutive day achievement system

### **User Management**
- **Profile Editor** - Comprehensive user profile management
- **Role Management** - Admin interface for user role assignment
- **Department Organization** - Team-based organization structure
- **CSV Import** - Bulk user import functionality

### **Accessibility & UX**
- **Keyboard Navigation** - Full keyboard accessibility
- **Screen Reader Support** - ARIA labels and live regions
- **Focus Management** - Proper focus trapping and indicators
- **Error Boundaries** - Graceful error handling
- **Loading States** - Comprehensive loading and skeleton screens

### **Media & Content**
- **Video Library** - Apple News-style media presentation
- **QR Code Integration** - Event check-in and sharing
- **Image Uploads** - Avatar and content image support
- **Editorial System** - Content management interface

## **Development & Deployment**

### **Development Workflow**
- **Hot Module Replacement** - Fast development iteration
- **TypeScript Integration** - Full type checking and IntelliSense
- **Component Development** - Modular, reusable component architecture
- **Error Tracking** - Console error monitoring and reporting

### **Performance Optimization**
- **Code Splitting** - Route-based code splitting
- **Lazy Loading** - Component and image lazy loading
- **Caching Strategy** - React Query caching and Supabase optimization
- **Bundle Optimization** - Vite's built-in optimization

### **Testing & Quality**
- **TypeScript Safety** - Compile-time error prevention
- **ESLint Rules** - Code quality enforcement
- **Accessibility Testing** - Built-in accessibility validation
- **Error Boundaries** - Runtime error containment

This fitness tracking application represents a modern, full-stack web application with native mobile capabilities, built with a focus on accessibility, performance, and user experience. The architecture supports real-time collaboration, comprehensive user management, and scalable team-based fitness challenges.